// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type Vec3 capnp.Struct

// Vec3_TypeID is the unique identifier for the type Vec3.
const Vec3_TypeID = 0xc7e9576dd1cb2dc1

func NewVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func NewRootVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func ReadRootVec3(msg *capnp.Message) (Vec3, error) {
	root, err := msg.Root()
	return Vec3(root.Struct()), err
}

func (s Vec3) String() string {
	str, _ := text.Marshal(0xc7e9576dd1cb2dc1, capnp.Struct(s))
	return str
}

func (s Vec3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vec3) DecodeFromPtr(p capnp.Ptr) Vec3 {
	return Vec3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vec3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vec3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vec3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vec3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vec3) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Vec3) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Vec3) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Vec3) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Vec3) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Vec3) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// Vec3_List is a list of Vec3.
type Vec3_List = capnp.StructList[Vec3]

// NewVec3 creates a new list of Vec3.
func NewVec3_List(s *capnp.Segment, sz int32) (Vec3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Vec3](l), err
}

// Vec3_Future is a wrapper for a Vec3 promised by a client call.
type Vec3_Future struct{ *capnp.Future }

func (f Vec3_Future) Struct() (Vec3, error) {
	p, err := f.Future.Ptr()
	return Vec3(p.Struct()), err
}

type Packet capnp.Struct
type Packet_Which uint16

const (
	Packet_Which_unknown       Packet_Which = 0
	Packet_Which_auth          Packet_Which = 1
	Packet_Which_entityMove    Packet_Which = 2
	Packet_Which_entityStop    Packet_Which = 3
	Packet_Which_entitySpawn   Packet_Which = 4
	Packet_Which_entityObserve Packet_Which = 5
)

func (w Packet_Which) String() string {
	const s = "unknownauthentityMoveentityStopentitySpawnentityObserve"
	switch w {
	case Packet_Which_unknown:
		return s[0:7]
	case Packet_Which_auth:
		return s[7:11]
	case Packet_Which_entityMove:
		return s[11:21]
	case Packet_Which_entityStop:
		return s[21:31]
	case Packet_Which_entitySpawn:
		return s[31:42]
	case Packet_Which_entityObserve:
		return s[42:55]

	}
	return "Packet_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Packet_TypeID is the unique identifier for the type Packet.
const Packet_TypeID = 0xc7ca850fead659c0

func NewPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func NewRootPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func ReadRootPacket(msg *capnp.Message) (Packet, error) {
	root, err := msg.Root()
	return Packet(root.Struct()), err
}

func (s Packet) String() string {
	str, _ := text.Marshal(0xc7ca850fead659c0, capnp.Struct(s))
	return str
}

func (s Packet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Packet) DecodeFromPtr(p capnp.Ptr) Packet {
	return Packet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Packet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Packet) Which() Packet_Which {
	return Packet_Which(capnp.Struct(s).Uint16(0))
}
func (s Packet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Packet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Packet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Packet) SetUnknown() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Packet) Auth() (AuthPacket, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != auth")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AuthPacket(p.Struct()), err
}

func (s Packet) HasAuth() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetAuth(v AuthPacket) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated AuthPacket struct, preferring placement in s's segment.
func (s Packet) NewAuth() (AuthPacket, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewAuthPacket(capnp.Struct(s).Segment())
	if err != nil {
		return AuthPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityMove() (EntityMovePacket, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != entityMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityMovePacket(p.Struct()), err
}

func (s Packet) HasEntityMove() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityMove(v EntityMovePacket) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityMove sets the entityMove field to a newly
// allocated EntityMovePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityMove() (EntityMovePacket, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewEntityMovePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityMovePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityStop() (EntityStopPacket, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != entityStop")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityStopPacket(p.Struct()), err
}

func (s Packet) HasEntityStop() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityStop(v EntityStopPacket) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityStop sets the entityStop field to a newly
// allocated EntityStopPacket struct, preferring placement in s's segment.
func (s Packet) NewEntityStop() (EntityStopPacket, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewEntityStopPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityStopPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntitySpawn() (EntitySpawnPacket, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != entitySpawn")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntitySpawnPacket(p.Struct()), err
}

func (s Packet) HasEntitySpawn() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntitySpawn(v EntitySpawnPacket) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntitySpawn sets the entitySpawn field to a newly
// allocated EntitySpawnPacket struct, preferring placement in s's segment.
func (s Packet) NewEntitySpawn() (EntitySpawnPacket, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewEntitySpawnPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntitySpawnPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityObserve() (EntityObservePacket, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != entityObserve")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityObservePacket(p.Struct()), err
}

func (s Packet) HasEntityObserve() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityObserve(v EntityObservePacket) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityObserve sets the entityObserve field to a newly
// allocated EntityObservePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityObserve() (EntityObservePacket, error) {
	capnp.Struct(s).SetUint16(0, 5)
	ss, err := NewEntityObservePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityObservePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Packet_List is a list of Packet.
type Packet_List = capnp.StructList[Packet]

// NewPacket creates a new list of Packet.
func NewPacket_List(s *capnp.Segment, sz int32) (Packet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Packet](l), err
}

// Packet_Future is a wrapper for a Packet promised by a client call.
type Packet_Future struct{ *capnp.Future }

func (f Packet_Future) Struct() (Packet, error) {
	p, err := f.Future.Ptr()
	return Packet(p.Struct()), err
}
func (p Packet_Future) Auth() AuthPacket_Future {
	return AuthPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityMove() EntityMovePacket_Future {
	return EntityMovePacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityStop() EntityStopPacket_Future {
	return EntityStopPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntitySpawn() EntitySpawnPacket_Future {
	return EntitySpawnPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityObserve() EntityObservePacket_Future {
	return EntityObservePacket_Future{Future: p.Future.Field(0, nil)}
}

type AuthPacket capnp.Struct

// AuthPacket_TypeID is the unique identifier for the type AuthPacket.
const AuthPacket_TypeID = 0xfe26553a53d9d276

func NewAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func NewRootAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func ReadRootAuthPacket(msg *capnp.Message) (AuthPacket, error) {
	root, err := msg.Root()
	return AuthPacket(root.Struct()), err
}

func (s AuthPacket) String() string {
	str, _ := text.Marshal(0xfe26553a53d9d276, capnp.Struct(s))
	return str
}

func (s AuthPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AuthPacket) DecodeFromPtr(p capnp.Ptr) AuthPacket {
	return AuthPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AuthPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AuthPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AuthPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AuthPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AuthPacket) Token() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s AuthPacket) SetToken(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// AuthPacket_List is a list of AuthPacket.
type AuthPacket_List = capnp.StructList[AuthPacket]

// NewAuthPacket creates a new list of AuthPacket.
func NewAuthPacket_List(s *capnp.Segment, sz int32) (AuthPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AuthPacket](l), err
}

// AuthPacket_Future is a wrapper for a AuthPacket promised by a client call.
type AuthPacket_Future struct{ *capnp.Future }

func (f AuthPacket_Future) Struct() (AuthPacket, error) {
	p, err := f.Future.Ptr()
	return AuthPacket(p.Struct()), err
}

type EntityMovePacket capnp.Struct

// EntityMovePacket_TypeID is the unique identifier for the type EntityMovePacket.
const EntityMovePacket_TypeID = 0xf2786494a8b7e4d0

func NewEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return EntityMovePacket(st), err
}

func NewRootEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return EntityMovePacket(st), err
}

func ReadRootEntityMovePacket(msg *capnp.Message) (EntityMovePacket, error) {
	root, err := msg.Root()
	return EntityMovePacket(root.Struct()), err
}

func (s EntityMovePacket) String() string {
	str, _ := text.Marshal(0xf2786494a8b7e4d0, capnp.Struct(s))
	return str
}

func (s EntityMovePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityMovePacket) DecodeFromPtr(p capnp.Ptr) EntityMovePacket {
	return EntityMovePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityMovePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityMovePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityMovePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityMovePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityMovePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityMovePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntityMovePacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntityMovePacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityMovePacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntityMovePacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityMovePacket) Rot() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s EntityMovePacket) SetRot(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// EntityMovePacket_List is a list of EntityMovePacket.
type EntityMovePacket_List = capnp.StructList[EntityMovePacket]

// NewEntityMovePacket creates a new list of EntityMovePacket.
func NewEntityMovePacket_List(s *capnp.Segment, sz int32) (EntityMovePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[EntityMovePacket](l), err
}

// EntityMovePacket_Future is a wrapper for a EntityMovePacket promised by a client call.
type EntityMovePacket_Future struct{ *capnp.Future }

func (f EntityMovePacket_Future) Struct() (EntityMovePacket, error) {
	p, err := f.Future.Ptr()
	return EntityMovePacket(p.Struct()), err
}
func (p EntityMovePacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntityStopPacket capnp.Struct

// EntityStopPacket_TypeID is the unique identifier for the type EntityStopPacket.
const EntityStopPacket_TypeID = 0xd875a6f9b6c9ca42

func NewEntityStopPacket(s *capnp.Segment) (EntityStopPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntityStopPacket(st), err
}

func NewRootEntityStopPacket(s *capnp.Segment) (EntityStopPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntityStopPacket(st), err
}

func ReadRootEntityStopPacket(msg *capnp.Message) (EntityStopPacket, error) {
	root, err := msg.Root()
	return EntityStopPacket(root.Struct()), err
}

func (s EntityStopPacket) String() string {
	str, _ := text.Marshal(0xd875a6f9b6c9ca42, capnp.Struct(s))
	return str
}

func (s EntityStopPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityStopPacket) DecodeFromPtr(p capnp.Ptr) EntityStopPacket {
	return EntityStopPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityStopPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityStopPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityStopPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityStopPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityStopPacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityStopPacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntityStopPacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntityStopPacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityStopPacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntityStopPacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// EntityStopPacket_List is a list of EntityStopPacket.
type EntityStopPacket_List = capnp.StructList[EntityStopPacket]

// NewEntityStopPacket creates a new list of EntityStopPacket.
func NewEntityStopPacket_List(s *capnp.Segment, sz int32) (EntityStopPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EntityStopPacket](l), err
}

// EntityStopPacket_Future is a wrapper for a EntityStopPacket promised by a client call.
type EntityStopPacket_Future struct{ *capnp.Future }

func (f EntityStopPacket_Future) Struct() (EntityStopPacket, error) {
	p, err := f.Future.Ptr()
	return EntityStopPacket(p.Struct()), err
}
func (p EntityStopPacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntitySpawnPacket capnp.Struct

// EntitySpawnPacket_TypeID is the unique identifier for the type EntitySpawnPacket.
const EntitySpawnPacket_TypeID = 0x90a96340f29028ba

func NewEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntitySpawnPacket(st), err
}

func NewRootEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntitySpawnPacket(st), err
}

func ReadRootEntitySpawnPacket(msg *capnp.Message) (EntitySpawnPacket, error) {
	root, err := msg.Root()
	return EntitySpawnPacket(root.Struct()), err
}

func (s EntitySpawnPacket) String() string {
	str, _ := text.Marshal(0x90a96340f29028ba, capnp.Struct(s))
	return str
}

func (s EntitySpawnPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntitySpawnPacket) DecodeFromPtr(p capnp.Ptr) EntitySpawnPacket {
	return EntitySpawnPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntitySpawnPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntitySpawnPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntitySpawnPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntitySpawnPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntitySpawnPacket) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntitySpawnPacket) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EntitySpawnPacket_List is a list of EntitySpawnPacket.
type EntitySpawnPacket_List = capnp.StructList[EntitySpawnPacket]

// NewEntitySpawnPacket creates a new list of EntitySpawnPacket.
func NewEntitySpawnPacket_List(s *capnp.Segment, sz int32) (EntitySpawnPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntitySpawnPacket](l), err
}

// EntitySpawnPacket_Future is a wrapper for a EntitySpawnPacket promised by a client call.
type EntitySpawnPacket_Future struct{ *capnp.Future }

func (f EntitySpawnPacket_Future) Struct() (EntitySpawnPacket, error) {
	p, err := f.Future.Ptr()
	return EntitySpawnPacket(p.Struct()), err
}

type EntityObservePacket capnp.Struct

// EntityObservePacket_TypeID is the unique identifier for the type EntityObservePacket.
const EntityObservePacket_TypeID = 0xc823831ca674c61b

func NewEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func NewRootEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func ReadRootEntityObservePacket(msg *capnp.Message) (EntityObservePacket, error) {
	root, err := msg.Root()
	return EntityObservePacket(root.Struct()), err
}

func (s EntityObservePacket) String() string {
	str, _ := text.Marshal(0xc823831ca674c61b, capnp.Struct(s))
	return str
}

func (s EntityObservePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityObservePacket) DecodeFromPtr(p capnp.Ptr) EntityObservePacket {
	return EntityObservePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityObservePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityObservePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityObservePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityObservePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityObservePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityObservePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EntityObservePacket_List is a list of EntityObservePacket.
type EntityObservePacket_List = capnp.StructList[EntityObservePacket]

// NewEntityObservePacket creates a new list of EntityObservePacket.
func NewEntityObservePacket_List(s *capnp.Segment, sz int32) (EntityObservePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityObservePacket](l), err
}

// EntityObservePacket_Future is a wrapper for a EntityObservePacket promised by a client call.
type EntityObservePacket_Future struct{ *capnp.Future }

func (f EntityObservePacket_Future) Struct() (EntityObservePacket, error) {
	p, err := f.Future.Ptr()
	return EntityObservePacket(p.Struct()), err
}

const schema_9c4788c5a214e29c = "x\xda\x94\x93MHTo\x14\xc6\xcf\xf3\xbew\x1c\x15" +
	"/\xce\xfc\xef,\xfe\xf4\x81\xd0\x17\x19Nhnb6" +
	"c\x92T\xa28/ff\xd0b\x1c\x07\x1c\xa4{/" +
	"z\xc7\xd16-Bh\x13X\xb8(00\x09Q\x10" +
	"*\x88\xbehQ\xd1\xa7\x11}@\x91\xdbhS\xbb\x06" +
	"Zh\xe9\x1b\xf7\x8e\xde;su\xd3\xeep\xces\xcf" +
	"y\xde\xdf9\xb7~\x1eMJ\x83\xfa\x8e\x13\x13u\x81" +
	"2\xf9p\xefx\xbe)57NB\x05\xe4\xe4\xd7\xc8" +
	"\xf4\xf3\x0bG&I\x09\x12io\xb1\xac-\xc2\x8e>" +
	"!N\x90\x8f{>\xff\xa8\x1e[x\xe9\xd3\xb6 X" +
	"F\xa4\xfd\xc2\xb4\xb6b\xab\x1b\x97\xd0\x0d\x82|\x12}" +
	"\xf3\xe1L\xf7wG\xce|\xad\xbb\xf8e\xed4\xb7\xa3" +
	"\x1e~\x93 \xb7\xbe\xb0f\xb6\x9d\xdf\xf9j\x13\x1b\x8d" +
	"?y%48\x9f\xadp\xdbG\xf3\xc2\xeb\xbbK3" +
	"\xd9/>q\xc0\xb1\xba]\xc9k\xb5\x8ex\xb7\x92#" +
	"\xc8\xf7\xdf\xee\xcdN\xf4\x8d\xe4}.\x0a\xe21%\xaf" +
	"]r\xc4\x17\x15\xdb\xc6\xf0\xc7\xc5\xceX\xd7\x9e\xd5\xcd" +
	"h\xd4\x06\x9ej\x0d\x01;\x8a\x06\xe2\x14\x95f25" +
	"\x90\xb6\xf6\xa7X\xd2\xd4\xcdX\x8bne\xac\xd1N3" +
	"\x99\xd3\xe3\x09\xa7\x92\x00\x84\xc2\x15\"\x05Dau\x0b" +
	"\x91(\xe7\x10\x11\x06\x9e\xe9C\x051T\x10\xdc.p" +
	"\xba$\x92\xa9\xe0\xda\xa7\xffs\xa5JJ\xe7\xdb\xab\xcd" +
	"Db\x82CL1\xa8X\x95\x11\xd8\xd9k\xfb\x88\xc4" +
	"\x15\x0eq\x83Ae+2\x02F\x14\xbe~\x8aHL" +
	"q\x88y\x06\x95\xff\x91\x11p\xa2\xf0\x9c\x9d\x9d\xe5\x10" +
	"w\x18T\xe5\xb7\x8c@!\x0a\xdf\xee%\x12\xb78\xc4" +
	"#\x065\xb0,#\x08\x10\x85\x1f\x0c\x12\x89\xfb\x1c\xe2" +
	"\x19\xc3\xb9\xac>\xa0\x1b9\x9d\xca\xaa\x93Y\xab\x1f!" +
	"\x8f\x10\x01!\x82L;\xefn7\x88\x0f\xa7\x11\xf2h" +
	"\x97\x94;-\xe2\x86\x89\x90\xb7\xb9\xd2\xb2I\xc1dN" +
	"G\xc8\xbb\xc6\x92zG/\xd5\x0c\xa5\x07\x9d\x01\xee\xa1" +
	"\xac)J\xf9\x9dH\xa7\xd0h\xd3\xabr\xc1\xb7\xfcG" +
	"$\x9a8D\x1bC\x18(\xb0;f'\x0fs\x88\x04" +
	"C\x98\xb1\x02\xbav;y\x94C\x1cg\xc0\x08*\x89" +
	"\xa1\x92\x80Q7:\xbb\x1e\xb9Sy\xd1\xee;z\x1d" +
	"\x8f\x85\xe5\x13\xf9\xd6\x1f\xf3\xd6\x1f/\xbcj\xc3\x09\x94" +
	"\x1c\x92e\x98\x89\x1a\xf7\x8e\xca\xddF\xb5v\xa3]\x1c" +
	"\xa2\x9ea\xfd5\xd1V\"Q\xc7!\x0en\xd2\xdc\x18" +
	"\xcaX\x19C'\"\x84\xbc_\xd2G\xafxt\xbb1" +
	"\x9c.\x1a]D2\xe6\x91tA\xb6z\xcc\\\x90b" +
	"\x07\x91h\xe3\x10'\xff\xd1Op\xd0\xb060.x" +
	";\x94\xb5\xfa\xd7\xd0\xfa\xc8\x1e\xf0\xc8\xd6X\xc6@Z" +
	"_\x9f\xf57\x00\x00\xff\xff\x17BHI"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c4788c5a214e29c,
		Nodes: []uint64{
			0x90a96340f29028ba,
			0xc7ca850fead659c0,
			0xc7e9576dd1cb2dc1,
			0xc823831ca674c61b,
			0xd875a6f9b6c9ca42,
			0xf2786494a8b7e4d0,
			0xfe26553a53d9d276,
		},
		Compressed: true,
	})
}
