// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type Vec3 capnp.Struct

// Vec3_TypeID is the unique identifier for the type Vec3.
const Vec3_TypeID = 0xc7e9576dd1cb2dc1

func NewVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func NewRootVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func ReadRootVec3(msg *capnp.Message) (Vec3, error) {
	root, err := msg.Root()
	return Vec3(root.Struct()), err
}

func (s Vec3) String() string {
	str, _ := text.Marshal(0xc7e9576dd1cb2dc1, capnp.Struct(s))
	return str
}

func (s Vec3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vec3) DecodeFromPtr(p capnp.Ptr) Vec3 {
	return Vec3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vec3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vec3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vec3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vec3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vec3) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Vec3) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Vec3) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Vec3) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Vec3) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Vec3) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// Vec3_List is a list of Vec3.
type Vec3_List = capnp.StructList[Vec3]

// NewVec3 creates a new list of Vec3.
func NewVec3_List(s *capnp.Segment, sz int32) (Vec3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Vec3](l), err
}

// Vec3_Future is a wrapper for a Vec3 promised by a client call.
type Vec3_Future struct{ *capnp.Future }

func (f Vec3_Future) Struct() (Vec3, error) {
	p, err := f.Future.Ptr()
	return Vec3(p.Struct()), err
}

type Packet capnp.Struct
type Packet_Which uint16

const (
	Packet_Which_unknown       Packet_Which = 0
	Packet_Which_auth          Packet_Which = 1
	Packet_Which_enterWorld    Packet_Which = 2
	Packet_Which_entityMove    Packet_Which = 3
	Packet_Which_entitySpawn   Packet_Which = 4
	Packet_Which_entityObserve Packet_Which = 5
	Packet_Which_entityDespawn Packet_Which = 6
)

func (w Packet_Which) String() string {
	const s = "unknownauthenterWorldentityMoveentitySpawnentityObserveentityDespawn"
	switch w {
	case Packet_Which_unknown:
		return s[0:7]
	case Packet_Which_auth:
		return s[7:11]
	case Packet_Which_enterWorld:
		return s[11:21]
	case Packet_Which_entityMove:
		return s[21:31]
	case Packet_Which_entitySpawn:
		return s[31:42]
	case Packet_Which_entityObserve:
		return s[42:55]
	case Packet_Which_entityDespawn:
		return s[55:68]

	}
	return "Packet_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Packet_TypeID is the unique identifier for the type Packet.
const Packet_TypeID = 0xc7ca850fead659c0

func NewPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func NewRootPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func ReadRootPacket(msg *capnp.Message) (Packet, error) {
	root, err := msg.Root()
	return Packet(root.Struct()), err
}

func (s Packet) String() string {
	str, _ := text.Marshal(0xc7ca850fead659c0, capnp.Struct(s))
	return str
}

func (s Packet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Packet) DecodeFromPtr(p capnp.Ptr) Packet {
	return Packet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Packet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Packet) Which() Packet_Which {
	return Packet_Which(capnp.Struct(s).Uint16(0))
}
func (s Packet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Packet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Packet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Packet) SetUnknown() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Packet) Auth() (AuthPacket, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != auth")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AuthPacket(p.Struct()), err
}

func (s Packet) HasAuth() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetAuth(v AuthPacket) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated AuthPacket struct, preferring placement in s's segment.
func (s Packet) NewAuth() (AuthPacket, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewAuthPacket(capnp.Struct(s).Segment())
	if err != nil {
		return AuthPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EnterWorld() (EnterWorldPacket, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != enterWorld")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EnterWorldPacket(p.Struct()), err
}

func (s Packet) HasEnterWorld() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEnterWorld(v EnterWorldPacket) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnterWorld sets the enterWorld field to a newly
// allocated EnterWorldPacket struct, preferring placement in s's segment.
func (s Packet) NewEnterWorld() (EnterWorldPacket, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewEnterWorldPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EnterWorldPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityMove() (EntityMovePacket, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != entityMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityMovePacket(p.Struct()), err
}

func (s Packet) HasEntityMove() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityMove(v EntityMovePacket) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityMove sets the entityMove field to a newly
// allocated EntityMovePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityMove() (EntityMovePacket, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewEntityMovePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityMovePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntitySpawn() (EntitySpawnPacket, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != entitySpawn")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntitySpawnPacket(p.Struct()), err
}

func (s Packet) HasEntitySpawn() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntitySpawn(v EntitySpawnPacket) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntitySpawn sets the entitySpawn field to a newly
// allocated EntitySpawnPacket struct, preferring placement in s's segment.
func (s Packet) NewEntitySpawn() (EntitySpawnPacket, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewEntitySpawnPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntitySpawnPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityObserve() (EntityObservePacket, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != entityObserve")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityObservePacket(p.Struct()), err
}

func (s Packet) HasEntityObserve() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityObserve(v EntityObservePacket) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityObserve sets the entityObserve field to a newly
// allocated EntityObservePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityObserve() (EntityObservePacket, error) {
	capnp.Struct(s).SetUint16(0, 5)
	ss, err := NewEntityObservePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityObservePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityDespawn() (EntityDespawnPacket, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != entityDespawn")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityDespawnPacket(p.Struct()), err
}

func (s Packet) HasEntityDespawn() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityDespawn(v EntityDespawnPacket) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityDespawn sets the entityDespawn field to a newly
// allocated EntityDespawnPacket struct, preferring placement in s's segment.
func (s Packet) NewEntityDespawn() (EntityDespawnPacket, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewEntityDespawnPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityDespawnPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Packet_List is a list of Packet.
type Packet_List = capnp.StructList[Packet]

// NewPacket creates a new list of Packet.
func NewPacket_List(s *capnp.Segment, sz int32) (Packet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Packet](l), err
}

// Packet_Future is a wrapper for a Packet promised by a client call.
type Packet_Future struct{ *capnp.Future }

func (f Packet_Future) Struct() (Packet, error) {
	p, err := f.Future.Ptr()
	return Packet(p.Struct()), err
}
func (p Packet_Future) Auth() AuthPacket_Future {
	return AuthPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EnterWorld() EnterWorldPacket_Future {
	return EnterWorldPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityMove() EntityMovePacket_Future {
	return EntityMovePacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntitySpawn() EntitySpawnPacket_Future {
	return EntitySpawnPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityObserve() EntityObservePacket_Future {
	return EntityObservePacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityDespawn() EntityDespawnPacket_Future {
	return EntityDespawnPacket_Future{Future: p.Future.Field(0, nil)}
}

type AuthPacket capnp.Struct

// AuthPacket_TypeID is the unique identifier for the type AuthPacket.
const AuthPacket_TypeID = 0xfe26553a53d9d276

func NewAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func NewRootAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func ReadRootAuthPacket(msg *capnp.Message) (AuthPacket, error) {
	root, err := msg.Root()
	return AuthPacket(root.Struct()), err
}

func (s AuthPacket) String() string {
	str, _ := text.Marshal(0xfe26553a53d9d276, capnp.Struct(s))
	return str
}

func (s AuthPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AuthPacket) DecodeFromPtr(p capnp.Ptr) AuthPacket {
	return AuthPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AuthPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AuthPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AuthPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AuthPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AuthPacket) Token() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s AuthPacket) SetToken(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// AuthPacket_List is a list of AuthPacket.
type AuthPacket_List = capnp.StructList[AuthPacket]

// NewAuthPacket creates a new list of AuthPacket.
func NewAuthPacket_List(s *capnp.Segment, sz int32) (AuthPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AuthPacket](l), err
}

// AuthPacket_Future is a wrapper for a AuthPacket promised by a client call.
type AuthPacket_Future struct{ *capnp.Future }

func (f AuthPacket_Future) Struct() (AuthPacket, error) {
	p, err := f.Future.Ptr()
	return AuthPacket(p.Struct()), err
}

type EnterWorldPacket capnp.Struct

// EnterWorldPacket_TypeID is the unique identifier for the type EnterWorldPacket.
const EnterWorldPacket_TypeID = 0xd7296609ec1b130c

func NewEnterWorldPacket(s *capnp.Segment) (EnterWorldPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnterWorldPacket(st), err
}

func NewRootEnterWorldPacket(s *capnp.Segment) (EnterWorldPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnterWorldPacket(st), err
}

func ReadRootEnterWorldPacket(msg *capnp.Message) (EnterWorldPacket, error) {
	root, err := msg.Root()
	return EnterWorldPacket(root.Struct()), err
}

func (s EnterWorldPacket) String() string {
	str, _ := text.Marshal(0xd7296609ec1b130c, capnp.Struct(s))
	return str
}

func (s EnterWorldPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnterWorldPacket) DecodeFromPtr(p capnp.Ptr) EnterWorldPacket {
	return EnterWorldPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnterWorldPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnterWorldPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnterWorldPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnterWorldPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnterWorldPacket) Map() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EnterWorldPacket) HasMap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnterWorldPacket) MapBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EnterWorldPacket) SetMap(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EnterWorldPacket_List is a list of EnterWorldPacket.
type EnterWorldPacket_List = capnp.StructList[EnterWorldPacket]

// NewEnterWorldPacket creates a new list of EnterWorldPacket.
func NewEnterWorldPacket_List(s *capnp.Segment, sz int32) (EnterWorldPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EnterWorldPacket](l), err
}

// EnterWorldPacket_Future is a wrapper for a EnterWorldPacket promised by a client call.
type EnterWorldPacket_Future struct{ *capnp.Future }

func (f EnterWorldPacket_Future) Struct() (EnterWorldPacket, error) {
	p, err := f.Future.Ptr()
	return EnterWorldPacket(p.Struct()), err
}

type EntityMovePacket capnp.Struct

// EntityMovePacket_TypeID is the unique identifier for the type EntityMovePacket.
const EntityMovePacket_TypeID = 0xf2786494a8b7e4d0

func NewEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return EntityMovePacket(st), err
}

func NewRootEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return EntityMovePacket(st), err
}

func ReadRootEntityMovePacket(msg *capnp.Message) (EntityMovePacket, error) {
	root, err := msg.Root()
	return EntityMovePacket(root.Struct()), err
}

func (s EntityMovePacket) String() string {
	str, _ := text.Marshal(0xf2786494a8b7e4d0, capnp.Struct(s))
	return str
}

func (s EntityMovePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityMovePacket) DecodeFromPtr(p capnp.Ptr) EntityMovePacket {
	return EntityMovePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityMovePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityMovePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityMovePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityMovePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityMovePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityMovePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntityMovePacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntityMovePacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityMovePacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntityMovePacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityMovePacket) Rotation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s EntityMovePacket) SetRotation(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s EntityMovePacket) Stopped() bool {
	return capnp.Struct(s).Bit(96)
}

func (s EntityMovePacket) SetStopped(v bool) {
	capnp.Struct(s).SetBit(96, v)
}

func (s EntityMovePacket) Delta() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s EntityMovePacket) SetDelta(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

// EntityMovePacket_List is a list of EntityMovePacket.
type EntityMovePacket_List = capnp.StructList[EntityMovePacket]

// NewEntityMovePacket creates a new list of EntityMovePacket.
func NewEntityMovePacket_List(s *capnp.Segment, sz int32) (EntityMovePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[EntityMovePacket](l), err
}

// EntityMovePacket_Future is a wrapper for a EntityMovePacket promised by a client call.
type EntityMovePacket_Future struct{ *capnp.Future }

func (f EntityMovePacket_Future) Struct() (EntityMovePacket, error) {
	p, err := f.Future.Ptr()
	return EntityMovePacket(p.Struct()), err
}
func (p EntityMovePacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntitySpawnPacket capnp.Struct

// EntitySpawnPacket_TypeID is the unique identifier for the type EntitySpawnPacket.
const EntitySpawnPacket_TypeID = 0x90a96340f29028ba

func NewEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return EntitySpawnPacket(st), err
}

func NewRootEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return EntitySpawnPacket(st), err
}

func ReadRootEntitySpawnPacket(msg *capnp.Message) (EntitySpawnPacket, error) {
	root, err := msg.Root()
	return EntitySpawnPacket(root.Struct()), err
}

func (s EntitySpawnPacket) String() string {
	str, _ := text.Marshal(0x90a96340f29028ba, capnp.Struct(s))
	return str
}

func (s EntitySpawnPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntitySpawnPacket) DecodeFromPtr(p capnp.Ptr) EntitySpawnPacket {
	return EntitySpawnPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntitySpawnPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntitySpawnPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntitySpawnPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntitySpawnPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntitySpawnPacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntitySpawnPacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntitySpawnPacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntitySpawnPacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntitySpawnPacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntitySpawnPacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntitySpawnPacket) Rotation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s EntitySpawnPacket) SetRotation(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// EntitySpawnPacket_List is a list of EntitySpawnPacket.
type EntitySpawnPacket_List = capnp.StructList[EntitySpawnPacket]

// NewEntitySpawnPacket creates a new list of EntitySpawnPacket.
func NewEntitySpawnPacket_List(s *capnp.Segment, sz int32) (EntitySpawnPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[EntitySpawnPacket](l), err
}

// EntitySpawnPacket_Future is a wrapper for a EntitySpawnPacket promised by a client call.
type EntitySpawnPacket_Future struct{ *capnp.Future }

func (f EntitySpawnPacket_Future) Struct() (EntitySpawnPacket, error) {
	p, err := f.Future.Ptr()
	return EntitySpawnPacket(p.Struct()), err
}
func (p EntitySpawnPacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntityObservePacket capnp.Struct

// EntityObservePacket_TypeID is the unique identifier for the type EntityObservePacket.
const EntityObservePacket_TypeID = 0xc823831ca674c61b

func NewEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func NewRootEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func ReadRootEntityObservePacket(msg *capnp.Message) (EntityObservePacket, error) {
	root, err := msg.Root()
	return EntityObservePacket(root.Struct()), err
}

func (s EntityObservePacket) String() string {
	str, _ := text.Marshal(0xc823831ca674c61b, capnp.Struct(s))
	return str
}

func (s EntityObservePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityObservePacket) DecodeFromPtr(p capnp.Ptr) EntityObservePacket {
	return EntityObservePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityObservePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityObservePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityObservePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityObservePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityObservePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityObservePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EntityObservePacket_List is a list of EntityObservePacket.
type EntityObservePacket_List = capnp.StructList[EntityObservePacket]

// NewEntityObservePacket creates a new list of EntityObservePacket.
func NewEntityObservePacket_List(s *capnp.Segment, sz int32) (EntityObservePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityObservePacket](l), err
}

// EntityObservePacket_Future is a wrapper for a EntityObservePacket promised by a client call.
type EntityObservePacket_Future struct{ *capnp.Future }

func (f EntityObservePacket_Future) Struct() (EntityObservePacket, error) {
	p, err := f.Future.Ptr()
	return EntityObservePacket(p.Struct()), err
}

type EntityDespawnPacket capnp.Struct

// EntityDespawnPacket_TypeID is the unique identifier for the type EntityDespawnPacket.
const EntityDespawnPacket_TypeID = 0xe597cefc768f55cb

func NewEntityDespawnPacket(s *capnp.Segment) (EntityDespawnPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityDespawnPacket(st), err
}

func NewRootEntityDespawnPacket(s *capnp.Segment) (EntityDespawnPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityDespawnPacket(st), err
}

func ReadRootEntityDespawnPacket(msg *capnp.Message) (EntityDespawnPacket, error) {
	root, err := msg.Root()
	return EntityDespawnPacket(root.Struct()), err
}

func (s EntityDespawnPacket) String() string {
	str, _ := text.Marshal(0xe597cefc768f55cb, capnp.Struct(s))
	return str
}

func (s EntityDespawnPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityDespawnPacket) DecodeFromPtr(p capnp.Ptr) EntityDespawnPacket {
	return EntityDespawnPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityDespawnPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityDespawnPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityDespawnPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityDespawnPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityDespawnPacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityDespawnPacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EntityDespawnPacket_List is a list of EntityDespawnPacket.
type EntityDespawnPacket_List = capnp.StructList[EntityDespawnPacket]

// NewEntityDespawnPacket creates a new list of EntityDespawnPacket.
func NewEntityDespawnPacket_List(s *capnp.Segment, sz int32) (EntityDespawnPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityDespawnPacket](l), err
}

// EntityDespawnPacket_Future is a wrapper for a EntityDespawnPacket promised by a client call.
type EntityDespawnPacket_Future struct{ *capnp.Future }

func (f EntityDespawnPacket_Future) Struct() (EntityDespawnPacket, error) {
	p, err := f.Future.Ptr()
	return EntityDespawnPacket(p.Struct()), err
}

const schema_9c4788c5a214e29c = "x\xda\xac\x93_h#U\x14\xc6\xcfw\xefLbB" +
	"\x86\xcd\xec\x8cO\xbb\x10P\xf0\x1f\xac\xecn\xde\x0a\x92" +
	"V\x1at\xc5es\xa9\xeb\xa2(8MF6\xb4;" +
	"3$\xd3\xb4\x15\x96u\xd1\x85\x15\x16\xb6JE\x1f\xfa" +
	"bA\xb1O\xfa\xa0\x88R\xa1\x8a\xb5\xc5\xaaT\xf1/" +
	"X\x10Q\xb0\xa2/yk\xad\xbdr'i&I\xbb" +
	"o}\xbb\x9c\xf3\xcd\xc77\xe7\xfc\xce\xc9\x0c\x1b\xd4N" +
	"\x19wk\xc4\xc4I=!?\xbag\xa69X^\x98" +
	"!a\x80\xc9\xb9\xdf\xec\xf9\xe5\xeb\x0f\xcd\x91\x8e$\x91" +
	"\xb5\x85mKg\xea\x05\xf6\x0eA.=\xf1\xc3_G" +
	"\xae}\xb1\xa2\xc4\x88\xc5E$\x95\xe6\x0d6o-(" +
	"u\xfeMv\x13\x04\xf9\xc9\x89\xb5o.]\xd8\\\xe9" +
	"\xf3\xd6\x94xH{\xc5:\x13\xbd\x8a\x9a\xb2>\xf6y" +
	"\xf8\xd6\xf1\x17\xee\\\xed\xb3V\x8a\xfc\x86\x96\x86\xf5O" +
	"$\xde\xd4\x0a\x04\x99\xb1\x8e\xfd\x9dz\xf6\xde\x1f\xc94" +
	"\xd0\x9f9\xa57\xad\xdbu\xf52u\xa5];\x7f\xb3" +
	"\xb1\xf3\xf5k\x7f\x1cd|JO\xc3\x1a\x8a\xc4\x0fD" +
	"\xe2\xf5\xdf?x{\xb62\xd5Tb\xde\xef\xfc\xb4\xde" +
	"\xb4\xaaJ\x9cw\xf5\x9c\xfa\xbf\xc6\xb7?\x8f\x0c\x9c\xbf" +
	"k\xf7\x00k\xebr\xe2S\xebZB\xbd\xae&\x0at" +
	"B\x06Ny\xcc\x0d\xef/3'\xf0\x82\x81\xa2\x17V" +
	"\xc3\xe9\x91\xc0\x99\xf4\x0a\xa5\xa8S\x02D\x86kD\x1a" +
	"\x88\xcc\xe2\x00\x91\x18\xe4\x10\x8f2\x006T\xed\xcc#" +
	"D\xe2a\x0e\xf1\x18\x83\xc9\x98\x0dFd\x0aU,q" +
	"\x88\xa7\x18\x0an\xe4\x8a\x141\xa4\x082\xf0\xeb\xd5\xb0" +
	"\xea{D\x84l\xbc\x0c\x02\xb2\x04Y\xf3Cg\xaf\x9b" +
	"&\x86\xb4\xfa\xa2\x1d\x12Q\xc8\x92SN\xb6\x93\x1d\xe7" +
	"ZF\xca(\xda\xfb\x0f\x12\x89w9\xc4\"\x83\x81]" +
	"\xd9\x0a\xf7\xe1}D\xe2=\x0e\xb1\xc4`\xb0\xffd+" +
	"\xdd\xc7O\x12\x89E\x0e\xb1\xca`\xf0\x1di\x83\x13\x99" +
	"\xcb\xaa\xfa\x19\x87Xg0\xb4\x7f\xa5\x0d\x8d\xc8\xfcj" +
	"\x94H|\xc9!~b0\xf4miC'2\xbf\xaf" +
	"\x11\x89\xef8\xc4\xaf\x0cFbK\xdaH\x10\x99\x1b\xaa" +
	"\xfa\x0b\x87\xf8\x93\xe1\xca\x847\xe6\xf9\x93\x1e%\x8e8" +
	"\x13\xe1Ed\xe3\xb5\xb4\xff\xd4\xf5B\xb7v\xc1\xaf\x11" +
	"\x1f\xaf \x1b\xc3\x13\xb7\xab\xe1\xf4Y\x9fx\xc3E6" +
	"F\xa0\xa7=\x12P\xd2\x99\xf4\x90\x8d\x0f\xa6\xa7\x7fn" +
	"\x94ru\xb7\x169tP\xeeQ\x0c\xbb\x94\xab\x07-" +
	"\x8f\x0e\x93mE\xef\xdc\x1fw\xcb\xc8\xf7\xf1p4\xe6" +
	"\xc1\xec\x00\xa1\x8a\xc3\x1c\xa2\xd4\x05\xc4\xd9\xa31%\x98" +
	"\xda\xdb,\xa6;\xaf\xe7\xf6m\x9bw!yn4\xfa" +
	"\x8b\x16\x93D*\x85\xd6Ia(*o\xe3\x10\xf6\x01" +
	"\xb0\xf5\xf3\x1d\x8d|\xbcR\xcau\xf0\xee2\xba#6" +
	"J^r\x02d\x88!s\x8bH\xc3n4\xb6C\x88" +
	"\x14\xad\xb9\xe1vE\xb2;F\x97\x95\xd1\x14\x87x1" +
	"\xbe\xb8\xab\xea\xb8\x9e\xe7\x107\xba\x06\xfc\x92*^\xe7" +
	"\x10\xb3\x0c&\x7f\xa6\x85\xf4\xcb\xea(np\x88\xd7\x19" +
	"LMk\x11\xfd\xeai\"1\xc3!\xe6\x0e\xe16\xaf" +
	"\xd4C?\x08\xdc\x0a@\x0c \xe4*\xeex\xe8\xec\xdb" +
	"e\xeb_\x87&\xc2\x8b\xedy\xf5\x8d\xebt<\xae\\" +
	"\xe8\x8f\xb9\xde^\xa2\xff\x03\x00\x00\xff\xff\xd9\xbf\x8dL"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c4788c5a214e29c,
		Nodes: []uint64{
			0x90a96340f29028ba,
			0xc7ca850fead659c0,
			0xc7e9576dd1cb2dc1,
			0xc823831ca674c61b,
			0xd7296609ec1b130c,
			0xe597cefc768f55cb,
			0xf2786494a8b7e4d0,
			0xfe26553a53d9d276,
		},
		Compressed: true,
	})
}
