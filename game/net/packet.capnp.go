// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type Vec3 capnp.Struct

// Vec3_TypeID is the unique identifier for the type Vec3.
const Vec3_TypeID = 0xc7e9576dd1cb2dc1

func NewVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func NewRootVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func ReadRootVec3(msg *capnp.Message) (Vec3, error) {
	root, err := msg.Root()
	return Vec3(root.Struct()), err
}

func (s Vec3) String() string {
	str, _ := text.Marshal(0xc7e9576dd1cb2dc1, capnp.Struct(s))
	return str
}

func (s Vec3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vec3) DecodeFromPtr(p capnp.Ptr) Vec3 {
	return Vec3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vec3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vec3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vec3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vec3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vec3) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Vec3) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Vec3) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Vec3) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Vec3) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Vec3) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// Vec3_List is a list of Vec3.
type Vec3_List = capnp.StructList[Vec3]

// NewVec3 creates a new list of Vec3.
func NewVec3_List(s *capnp.Segment, sz int32) (Vec3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Vec3](l), err
}

// Vec3_Future is a wrapper for a Vec3 promised by a client call.
type Vec3_Future struct{ *capnp.Future }

func (f Vec3_Future) Struct() (Vec3, error) {
	p, err := f.Future.Ptr()
	return Vec3(p.Struct()), err
}

type Packet capnp.Struct
type Packet_Which uint16

const (
	Packet_Which_unknown       Packet_Which = 0
	Packet_Which_auth          Packet_Which = 1
	Packet_Which_enterWorld    Packet_Which = 2
	Packet_Which_entityMove    Packet_Which = 3
	Packet_Which_entitySpawn   Packet_Which = 4
	Packet_Which_entityObserve Packet_Which = 5
	Packet_Which_entityDespawn Packet_Which = 6
)

func (w Packet_Which) String() string {
	const s = "unknownauthenterWorldentityMoveentitySpawnentityObserveentityDespawn"
	switch w {
	case Packet_Which_unknown:
		return s[0:7]
	case Packet_Which_auth:
		return s[7:11]
	case Packet_Which_enterWorld:
		return s[11:21]
	case Packet_Which_entityMove:
		return s[21:31]
	case Packet_Which_entitySpawn:
		return s[31:42]
	case Packet_Which_entityObserve:
		return s[42:55]
	case Packet_Which_entityDespawn:
		return s[55:68]

	}
	return "Packet_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Packet_TypeID is the unique identifier for the type Packet.
const Packet_TypeID = 0xc7ca850fead659c0

func NewPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func NewRootPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func ReadRootPacket(msg *capnp.Message) (Packet, error) {
	root, err := msg.Root()
	return Packet(root.Struct()), err
}

func (s Packet) String() string {
	str, _ := text.Marshal(0xc7ca850fead659c0, capnp.Struct(s))
	return str
}

func (s Packet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Packet) DecodeFromPtr(p capnp.Ptr) Packet {
	return Packet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Packet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Packet) Which() Packet_Which {
	return Packet_Which(capnp.Struct(s).Uint16(0))
}
func (s Packet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Packet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Packet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Packet) SetUnknown() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Packet) Auth() (AuthPacket, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != auth")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AuthPacket(p.Struct()), err
}

func (s Packet) HasAuth() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetAuth(v AuthPacket) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated AuthPacket struct, preferring placement in s's segment.
func (s Packet) NewAuth() (AuthPacket, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewAuthPacket(capnp.Struct(s).Segment())
	if err != nil {
		return AuthPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EnterWorld() (EnterWorldPacket, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != enterWorld")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EnterWorldPacket(p.Struct()), err
}

func (s Packet) HasEnterWorld() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEnterWorld(v EnterWorldPacket) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnterWorld sets the enterWorld field to a newly
// allocated EnterWorldPacket struct, preferring placement in s's segment.
func (s Packet) NewEnterWorld() (EnterWorldPacket, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewEnterWorldPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EnterWorldPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityMove() (EntityMovePacket, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != entityMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityMovePacket(p.Struct()), err
}

func (s Packet) HasEntityMove() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityMove(v EntityMovePacket) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityMove sets the entityMove field to a newly
// allocated EntityMovePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityMove() (EntityMovePacket, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewEntityMovePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityMovePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntitySpawn() (EntitySpawnPacket, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != entitySpawn")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntitySpawnPacket(p.Struct()), err
}

func (s Packet) HasEntitySpawn() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntitySpawn(v EntitySpawnPacket) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntitySpawn sets the entitySpawn field to a newly
// allocated EntitySpawnPacket struct, preferring placement in s's segment.
func (s Packet) NewEntitySpawn() (EntitySpawnPacket, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewEntitySpawnPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntitySpawnPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityObserve() (EntityObservePacket, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != entityObserve")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityObservePacket(p.Struct()), err
}

func (s Packet) HasEntityObserve() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityObserve(v EntityObservePacket) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityObserve sets the entityObserve field to a newly
// allocated EntityObservePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityObserve() (EntityObservePacket, error) {
	capnp.Struct(s).SetUint16(0, 5)
	ss, err := NewEntityObservePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityObservePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityDespawn() (EntityDespawnPacket, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != entityDespawn")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityDespawnPacket(p.Struct()), err
}

func (s Packet) HasEntityDespawn() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityDespawn(v EntityDespawnPacket) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityDespawn sets the entityDespawn field to a newly
// allocated EntityDespawnPacket struct, preferring placement in s's segment.
func (s Packet) NewEntityDespawn() (EntityDespawnPacket, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewEntityDespawnPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityDespawnPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Packet_List is a list of Packet.
type Packet_List = capnp.StructList[Packet]

// NewPacket creates a new list of Packet.
func NewPacket_List(s *capnp.Segment, sz int32) (Packet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Packet](l), err
}

// Packet_Future is a wrapper for a Packet promised by a client call.
type Packet_Future struct{ *capnp.Future }

func (f Packet_Future) Struct() (Packet, error) {
	p, err := f.Future.Ptr()
	return Packet(p.Struct()), err
}
func (p Packet_Future) Auth() AuthPacket_Future {
	return AuthPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EnterWorld() EnterWorldPacket_Future {
	return EnterWorldPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityMove() EntityMovePacket_Future {
	return EntityMovePacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntitySpawn() EntitySpawnPacket_Future {
	return EntitySpawnPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityObserve() EntityObservePacket_Future {
	return EntityObservePacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityDespawn() EntityDespawnPacket_Future {
	return EntityDespawnPacket_Future{Future: p.Future.Field(0, nil)}
}

type AuthPacket capnp.Struct

// AuthPacket_TypeID is the unique identifier for the type AuthPacket.
const AuthPacket_TypeID = 0xfe26553a53d9d276

func NewAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func NewRootAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func ReadRootAuthPacket(msg *capnp.Message) (AuthPacket, error) {
	root, err := msg.Root()
	return AuthPacket(root.Struct()), err
}

func (s AuthPacket) String() string {
	str, _ := text.Marshal(0xfe26553a53d9d276, capnp.Struct(s))
	return str
}

func (s AuthPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AuthPacket) DecodeFromPtr(p capnp.Ptr) AuthPacket {
	return AuthPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AuthPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AuthPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AuthPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AuthPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AuthPacket) Token() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s AuthPacket) SetToken(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// AuthPacket_List is a list of AuthPacket.
type AuthPacket_List = capnp.StructList[AuthPacket]

// NewAuthPacket creates a new list of AuthPacket.
func NewAuthPacket_List(s *capnp.Segment, sz int32) (AuthPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AuthPacket](l), err
}

// AuthPacket_Future is a wrapper for a AuthPacket promised by a client call.
type AuthPacket_Future struct{ *capnp.Future }

func (f AuthPacket_Future) Struct() (AuthPacket, error) {
	p, err := f.Future.Ptr()
	return AuthPacket(p.Struct()), err
}

type EnterWorldPacket capnp.Struct

// EnterWorldPacket_TypeID is the unique identifier for the type EnterWorldPacket.
const EnterWorldPacket_TypeID = 0xd7296609ec1b130c

func NewEnterWorldPacket(s *capnp.Segment) (EnterWorldPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnterWorldPacket(st), err
}

func NewRootEnterWorldPacket(s *capnp.Segment) (EnterWorldPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnterWorldPacket(st), err
}

func ReadRootEnterWorldPacket(msg *capnp.Message) (EnterWorldPacket, error) {
	root, err := msg.Root()
	return EnterWorldPacket(root.Struct()), err
}

func (s EnterWorldPacket) String() string {
	str, _ := text.Marshal(0xd7296609ec1b130c, capnp.Struct(s))
	return str
}

func (s EnterWorldPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnterWorldPacket) DecodeFromPtr(p capnp.Ptr) EnterWorldPacket {
	return EnterWorldPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnterWorldPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnterWorldPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnterWorldPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnterWorldPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnterWorldPacket) Map() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EnterWorldPacket) HasMap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnterWorldPacket) MapBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EnterWorldPacket) SetMap(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EnterWorldPacket_List is a list of EnterWorldPacket.
type EnterWorldPacket_List = capnp.StructList[EnterWorldPacket]

// NewEnterWorldPacket creates a new list of EnterWorldPacket.
func NewEnterWorldPacket_List(s *capnp.Segment, sz int32) (EnterWorldPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EnterWorldPacket](l), err
}

// EnterWorldPacket_Future is a wrapper for a EnterWorldPacket promised by a client call.
type EnterWorldPacket_Future struct{ *capnp.Future }

func (f EnterWorldPacket_Future) Struct() (EnterWorldPacket, error) {
	p, err := f.Future.Ptr()
	return EnterWorldPacket(p.Struct()), err
}

type EntityMovePacket capnp.Struct

// EntityMovePacket_TypeID is the unique identifier for the type EntityMovePacket.
const EntityMovePacket_TypeID = 0xf2786494a8b7e4d0

func NewEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return EntityMovePacket(st), err
}

func NewRootEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return EntityMovePacket(st), err
}

func ReadRootEntityMovePacket(msg *capnp.Message) (EntityMovePacket, error) {
	root, err := msg.Root()
	return EntityMovePacket(root.Struct()), err
}

func (s EntityMovePacket) String() string {
	str, _ := text.Marshal(0xf2786494a8b7e4d0, capnp.Struct(s))
	return str
}

func (s EntityMovePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityMovePacket) DecodeFromPtr(p capnp.Ptr) EntityMovePacket {
	return EntityMovePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityMovePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityMovePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityMovePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityMovePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityMovePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityMovePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntityMovePacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntityMovePacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityMovePacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntityMovePacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityMovePacket) Rotation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s EntityMovePacket) SetRotation(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s EntityMovePacket) Stopped() bool {
	return capnp.Struct(s).Bit(96)
}

func (s EntityMovePacket) SetStopped(v bool) {
	capnp.Struct(s).SetBit(96, v)
}

func (s EntityMovePacket) Delta() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s EntityMovePacket) SetDelta(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

// EntityMovePacket_List is a list of EntityMovePacket.
type EntityMovePacket_List = capnp.StructList[EntityMovePacket]

// NewEntityMovePacket creates a new list of EntityMovePacket.
func NewEntityMovePacket_List(s *capnp.Segment, sz int32) (EntityMovePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[EntityMovePacket](l), err
}

// EntityMovePacket_Future is a wrapper for a EntityMovePacket promised by a client call.
type EntityMovePacket_Future struct{ *capnp.Future }

func (f EntityMovePacket_Future) Struct() (EntityMovePacket, error) {
	p, err := f.Future.Ptr()
	return EntityMovePacket(p.Struct()), err
}
func (p EntityMovePacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntitySpawnPacket capnp.Struct

// EntitySpawnPacket_TypeID is the unique identifier for the type EntitySpawnPacket.
const EntitySpawnPacket_TypeID = 0x90a96340f29028ba

func NewEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return EntitySpawnPacket(st), err
}

func NewRootEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return EntitySpawnPacket(st), err
}

func ReadRootEntitySpawnPacket(msg *capnp.Message) (EntitySpawnPacket, error) {
	root, err := msg.Root()
	return EntitySpawnPacket(root.Struct()), err
}

func (s EntitySpawnPacket) String() string {
	str, _ := text.Marshal(0x90a96340f29028ba, capnp.Struct(s))
	return str
}

func (s EntitySpawnPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntitySpawnPacket) DecodeFromPtr(p capnp.Ptr) EntitySpawnPacket {
	return EntitySpawnPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntitySpawnPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntitySpawnPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntitySpawnPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntitySpawnPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntitySpawnPacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntitySpawnPacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntitySpawnPacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntitySpawnPacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntitySpawnPacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntitySpawnPacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntitySpawnPacket) Rotation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s EntitySpawnPacket) SetRotation(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s EntitySpawnPacket) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s EntitySpawnPacket) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EntitySpawnPacket) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s EntitySpawnPacket) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// EntitySpawnPacket_List is a list of EntitySpawnPacket.
type EntitySpawnPacket_List = capnp.StructList[EntitySpawnPacket]

// NewEntitySpawnPacket creates a new list of EntitySpawnPacket.
func NewEntitySpawnPacket_List(s *capnp.Segment, sz int32) (EntitySpawnPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[EntitySpawnPacket](l), err
}

// EntitySpawnPacket_Future is a wrapper for a EntitySpawnPacket promised by a client call.
type EntitySpawnPacket_Future struct{ *capnp.Future }

func (f EntitySpawnPacket_Future) Struct() (EntitySpawnPacket, error) {
	p, err := f.Future.Ptr()
	return EntitySpawnPacket(p.Struct()), err
}
func (p EntitySpawnPacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntityObservePacket capnp.Struct

// EntityObservePacket_TypeID is the unique identifier for the type EntityObservePacket.
const EntityObservePacket_TypeID = 0xc823831ca674c61b

func NewEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func NewRootEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func ReadRootEntityObservePacket(msg *capnp.Message) (EntityObservePacket, error) {
	root, err := msg.Root()
	return EntityObservePacket(root.Struct()), err
}

func (s EntityObservePacket) String() string {
	str, _ := text.Marshal(0xc823831ca674c61b, capnp.Struct(s))
	return str
}

func (s EntityObservePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityObservePacket) DecodeFromPtr(p capnp.Ptr) EntityObservePacket {
	return EntityObservePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityObservePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityObservePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityObservePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityObservePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityObservePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityObservePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EntityObservePacket_List is a list of EntityObservePacket.
type EntityObservePacket_List = capnp.StructList[EntityObservePacket]

// NewEntityObservePacket creates a new list of EntityObservePacket.
func NewEntityObservePacket_List(s *capnp.Segment, sz int32) (EntityObservePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityObservePacket](l), err
}

// EntityObservePacket_Future is a wrapper for a EntityObservePacket promised by a client call.
type EntityObservePacket_Future struct{ *capnp.Future }

func (f EntityObservePacket_Future) Struct() (EntityObservePacket, error) {
	p, err := f.Future.Ptr()
	return EntityObservePacket(p.Struct()), err
}

type EntityDespawnPacket capnp.Struct

// EntityDespawnPacket_TypeID is the unique identifier for the type EntityDespawnPacket.
const EntityDespawnPacket_TypeID = 0xe597cefc768f55cb

func NewEntityDespawnPacket(s *capnp.Segment) (EntityDespawnPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityDespawnPacket(st), err
}

func NewRootEntityDespawnPacket(s *capnp.Segment) (EntityDespawnPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityDespawnPacket(st), err
}

func ReadRootEntityDespawnPacket(msg *capnp.Message) (EntityDespawnPacket, error) {
	root, err := msg.Root()
	return EntityDespawnPacket(root.Struct()), err
}

func (s EntityDespawnPacket) String() string {
	str, _ := text.Marshal(0xe597cefc768f55cb, capnp.Struct(s))
	return str
}

func (s EntityDespawnPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityDespawnPacket) DecodeFromPtr(p capnp.Ptr) EntityDespawnPacket {
	return EntityDespawnPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityDespawnPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityDespawnPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityDespawnPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityDespawnPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityDespawnPacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityDespawnPacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EntityDespawnPacket_List is a list of EntityDespawnPacket.
type EntityDespawnPacket_List = capnp.StructList[EntityDespawnPacket]

// NewEntityDespawnPacket creates a new list of EntityDespawnPacket.
func NewEntityDespawnPacket_List(s *capnp.Segment, sz int32) (EntityDespawnPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityDespawnPacket](l), err
}

// EntityDespawnPacket_Future is a wrapper for a EntityDespawnPacket promised by a client call.
type EntityDespawnPacket_Future struct{ *capnp.Future }

func (f EntityDespawnPacket_Future) Struct() (EntityDespawnPacket, error) {
	p, err := f.Future.Ptr()
	return EntityDespawnPacket(p.Struct()), err
}

const schema_9c4788c5a214e29c = "x\xda\xacS]h\x1ce\x14\xbd\xe7\xfbfvM\xd8" +
	"!;\xce\xbcH\x0a\x0b\x8a?\x15*\xb5y\xcbK\xa2" +
	"$\xf8\x83\xa1{\x89\xb5(>8\xd9\x1dIHvf" +
	"\xd8L\xfe\xc4P\x8b\x16*\x14\x1a\xa5\xa2B^,(" +
	"\xfa\xa4\x0f\x8aTZh\xc5\xdabU\xaa\xf8\x0b\x16T" +
	",\xfe\xe0\xd3\xbe\xb5\xd6~\xe5\x9b\xd9\x9d\xd9\xdd\xe61" +
	"o\x1f\xf7\x9e9s\xee\xbd\xe7\xec\x1e\x16\xe3\xc6\xfd\xd6" +
	"\xdd\x06\x09\xdem\x16\xd4'\xf7l\xb4\xc6k\xefm\x10" +
	"[\x10j\xf3w\xf7\xf8\xd9\xc3\x0fm\x92)\x8aD\xce" +
	"\x15\\u\xd2\x17\xc4\x9f\x04u\xfa\xc9\x1f\xfe\x19:\xf4" +
	"\xc59\x0dF\x0e\x9eDQc.\x89\xe3\xcee\x8d\x1e" +
	"\xf9M\x1c\x05A\x9d\xd9u\xe1\x9b\xc6\xfe\xbf\xcf\xf5q" +
	"\x1b\x1a\xbcn\xbc\xea\x1cJ^\x07\x8d\xf7\x09j\xf8\xf3" +
	"\xf8\x9d\x1d/\xdeq\xbe\x8fZ#Fn3\x07\xe1\xec" +
	"45\xf8Ns\x8c\xa0J\xce\xf0\xbf\x03\xcf\xee\xfc\x91" +
	"l\xab\x0bkB#&\xcd\x96\xc3\x09v*\xc1^\xd8" +
	"wt\xf9\xda\xd7\xaf_\xde\x8a\xb8\xa1\x89\xd7\x13\xf0Z" +
	"\x02\xbe\xf8\xc7\xc7\xef\x1e\xab\xaf\xb64X\xf63\xbfi" +
	"\xb6\x9c\xb75x\xe4-\xb3\xa2\xe7[\xfe\xf6\xe7\xe9\xd1" +
	"}w]\xdf\x82\xda9Q\xf8\xd49S\xd0\xafS\x85" +
	"1\xda\xa5\"\xaf6\xef\xc7\xf7\xd5\x84\x17\x05\xd1\xe8d" +
	"\x10\xcf\xc5k\xd3\x91\xb7\x12\x8cU\x93N\x15\xe0\xb24" +
	"\x88\x0c\x10\xd9\xde(\x11?-\xc1\xb3\x02\x80\x0b]\xf3" +
	"\x1f%\xe2\xba\x04G\x02\xb6\x10.\x04\x91\xdd\xd0\xc5\x05" +
	"\x09^\x15\xb0%\\H\"{\xe9^\"\x8e$\xf8y" +
	"\x811?\xf9\x15\x06H`\x80\xa0\xa2pq.\x9e\x0b" +
	"\x03\"B9\xbf\x10\x01e\x82j\x86\xb1\xd7\xe9\x0e\x92" +
	"\xc0 a(\xf0\x1a>J$P\xd2\x9f\xb7\xc7@2" +
	"F\xd5\xab\x15\xdb\xdawH\xa3\xa4T\"\xfe\xa3\x07\x89" +
	"\xf8\x03\x09>)`\xe1\xbaJ\xe5\x9f\xd0\xa2>\x94\xe0" +
	"\xd3\x02\x96\xf8_\xa5\xfaO=E\xc4'%\xf8\xbc\x80" +
	"%\xaf\xa9t\x80\xb3\xba\xfa\x99\x04_\x14\xb0\x8c\xff\x94" +
	"\x0b\x83\xc8\xfej\x86\x88\xbf\x94\xe0\x9f\x04,\xf3\xaar" +
	"a\x12\xd9\xdf7\x89\xf8;\x09\xfeU\xc0*\\Q." +
	"\x0aD\xf6%]\xfdE\x82\xff\x128\xb0\x14\xcc\x07\xe1" +
	"J@\x85!o)\x9eE9?\\{l?\x88\xfd" +
	"\xe6\xfe\xb0Ir\xa1\x8ern\xaf\xbc=\x17\xafM\x85" +
	"$\x97}\x94s\x93\xf4\xb4\xa7#*z+\x01\xcay" +
	"\xa4z\xfa{g\xa8\xb2\xe87\x13\x86\xcc\xec=\x88\x09" +
	"\x9f*\x8bQ\xca\x91\xb9\xb6\x8d\xe8\xdd\xfb\x13~\x0d#" +
	"z\xeb\xa5\xcc1\x93\xb7\x12\xf1\xb8\x04?&`w," +
	"\xf3\x88.NHp\xb5\xcb2S\xba\xf8\xb0\x04?." +
	"\x80\xd5\xce\x99\xb1\x96\xbd\x9e\xeb\xbc\xb2\xbf\xca.\xd3\xee" +
	"\x9dI\xa6H]K\xa4U\x18\x99\x0aK\xfb\xf6\x16\x09" +
	"v\xb7p^\x7f\x02\x92\x95/\xd4\xab\x95,\x00]D" +
	"\xb7\xe7D\xc5\x86\x17\xddd\xc0nI\x13~\xb2\xb6m" +
	"\x90\x94\x9cy\xd9\xef\x92\xe4fD\xeb\x9ahU\x82_" +
	"\xca3yP\xc7\xef\x05\x09>\xd2\xb5\xe0\x97u\xf1\xb0" +
	"\x04\x1f\xd3\x99|&\xb5\xf4+:\x14G$\xf8\x0d\x01" +
	"\xdb0RG\xbf\xb6\x87\x887$xs\x1b\x82z`" +
	"1\x0e\xa3\xc8\xaf\x03$\x00B\xa5\xee/\xc4\xdeM\xb7" +
	"Lg}`)\x9em\xef\xabo]{\xf2uU\xe2" +
	"p\xde\x0f:\x8an\x04\x00\x00\xff\xff\x19\xb4\x94\xc2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c4788c5a214e29c,
		Nodes: []uint64{
			0x90a96340f29028ba,
			0xc7ca850fead659c0,
			0xc7e9576dd1cb2dc1,
			0xc823831ca674c61b,
			0xd7296609ec1b130c,
			0xe597cefc768f55cb,
			0xf2786494a8b7e4d0,
			0xfe26553a53d9d276,
		},
		Compressed: true,
	})
}
