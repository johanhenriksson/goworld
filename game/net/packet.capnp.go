// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type Vec3 capnp.Struct

// Vec3_TypeID is the unique identifier for the type Vec3.
const Vec3_TypeID = 0xc7e9576dd1cb2dc1

func NewVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func NewRootVec3(s *capnp.Segment) (Vec3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vec3(st), err
}

func ReadRootVec3(msg *capnp.Message) (Vec3, error) {
	root, err := msg.Root()
	return Vec3(root.Struct()), err
}

func (s Vec3) String() string {
	str, _ := text.Marshal(0xc7e9576dd1cb2dc1, capnp.Struct(s))
	return str
}

func (s Vec3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vec3) DecodeFromPtr(p capnp.Ptr) Vec3 {
	return Vec3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vec3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vec3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vec3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vec3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vec3) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Vec3) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Vec3) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Vec3) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Vec3) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Vec3) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// Vec3_List is a list of Vec3.
type Vec3_List = capnp.StructList[Vec3]

// NewVec3 creates a new list of Vec3.
func NewVec3_List(s *capnp.Segment, sz int32) (Vec3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Vec3](l), err
}

// Vec3_Future is a wrapper for a Vec3 promised by a client call.
type Vec3_Future struct{ *capnp.Future }

func (f Vec3_Future) Struct() (Vec3, error) {
	p, err := f.Future.Ptr()
	return Vec3(p.Struct()), err
}

type Packet capnp.Struct
type Packet_Which uint16

const (
	Packet_Which_unknown       Packet_Which = 0
	Packet_Which_auth          Packet_Which = 1
	Packet_Which_entityMove    Packet_Which = 2
	Packet_Which_entitySpawn   Packet_Which = 3
	Packet_Which_entityObserve Packet_Which = 4
)

func (w Packet_Which) String() string {
	const s = "unknownauthentityMoveentitySpawnentityObserve"
	switch w {
	case Packet_Which_unknown:
		return s[0:7]
	case Packet_Which_auth:
		return s[7:11]
	case Packet_Which_entityMove:
		return s[11:21]
	case Packet_Which_entitySpawn:
		return s[21:32]
	case Packet_Which_entityObserve:
		return s[32:45]

	}
	return "Packet_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Packet_TypeID is the unique identifier for the type Packet.
const Packet_TypeID = 0xc7ca850fead659c0

func NewPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func NewRootPacket(s *capnp.Segment) (Packet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Packet(st), err
}

func ReadRootPacket(msg *capnp.Message) (Packet, error) {
	root, err := msg.Root()
	return Packet(root.Struct()), err
}

func (s Packet) String() string {
	str, _ := text.Marshal(0xc7ca850fead659c0, capnp.Struct(s))
	return str
}

func (s Packet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Packet) DecodeFromPtr(p capnp.Ptr) Packet {
	return Packet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Packet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Packet) Which() Packet_Which {
	return Packet_Which(capnp.Struct(s).Uint16(0))
}
func (s Packet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Packet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Packet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Packet) SetUnknown() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Packet) Auth() (AuthPacket, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != auth")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AuthPacket(p.Struct()), err
}

func (s Packet) HasAuth() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetAuth(v AuthPacket) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated AuthPacket struct, preferring placement in s's segment.
func (s Packet) NewAuth() (AuthPacket, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewAuthPacket(capnp.Struct(s).Segment())
	if err != nil {
		return AuthPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityMove() (EntityMovePacket, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != entityMove")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityMovePacket(p.Struct()), err
}

func (s Packet) HasEntityMove() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityMove(v EntityMovePacket) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityMove sets the entityMove field to a newly
// allocated EntityMovePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityMove() (EntityMovePacket, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewEntityMovePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityMovePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntitySpawn() (EntitySpawnPacket, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != entitySpawn")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntitySpawnPacket(p.Struct()), err
}

func (s Packet) HasEntitySpawn() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntitySpawn(v EntitySpawnPacket) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntitySpawn sets the entitySpawn field to a newly
// allocated EntitySpawnPacket struct, preferring placement in s's segment.
func (s Packet) NewEntitySpawn() (EntitySpawnPacket, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewEntitySpawnPacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntitySpawnPacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Packet) EntityObserve() (EntityObservePacket, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != entityObserve")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EntityObservePacket(p.Struct()), err
}

func (s Packet) HasEntityObserve() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Packet) SetEntityObserve(v EntityObservePacket) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntityObserve sets the entityObserve field to a newly
// allocated EntityObservePacket struct, preferring placement in s's segment.
func (s Packet) NewEntityObserve() (EntityObservePacket, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewEntityObservePacket(capnp.Struct(s).Segment())
	if err != nil {
		return EntityObservePacket{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Packet_List is a list of Packet.
type Packet_List = capnp.StructList[Packet]

// NewPacket creates a new list of Packet.
func NewPacket_List(s *capnp.Segment, sz int32) (Packet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Packet](l), err
}

// Packet_Future is a wrapper for a Packet promised by a client call.
type Packet_Future struct{ *capnp.Future }

func (f Packet_Future) Struct() (Packet, error) {
	p, err := f.Future.Ptr()
	return Packet(p.Struct()), err
}
func (p Packet_Future) Auth() AuthPacket_Future {
	return AuthPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityMove() EntityMovePacket_Future {
	return EntityMovePacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntitySpawn() EntitySpawnPacket_Future {
	return EntitySpawnPacket_Future{Future: p.Future.Field(0, nil)}
}
func (p Packet_Future) EntityObserve() EntityObservePacket_Future {
	return EntityObservePacket_Future{Future: p.Future.Field(0, nil)}
}

type AuthPacket capnp.Struct

// AuthPacket_TypeID is the unique identifier for the type AuthPacket.
const AuthPacket_TypeID = 0xfe26553a53d9d276

func NewAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func NewRootAuthPacket(s *capnp.Segment) (AuthPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AuthPacket(st), err
}

func ReadRootAuthPacket(msg *capnp.Message) (AuthPacket, error) {
	root, err := msg.Root()
	return AuthPacket(root.Struct()), err
}

func (s AuthPacket) String() string {
	str, _ := text.Marshal(0xfe26553a53d9d276, capnp.Struct(s))
	return str
}

func (s AuthPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AuthPacket) DecodeFromPtr(p capnp.Ptr) AuthPacket {
	return AuthPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AuthPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AuthPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AuthPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AuthPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AuthPacket) Token() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s AuthPacket) SetToken(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// AuthPacket_List is a list of AuthPacket.
type AuthPacket_List = capnp.StructList[AuthPacket]

// NewAuthPacket creates a new list of AuthPacket.
func NewAuthPacket_List(s *capnp.Segment, sz int32) (AuthPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AuthPacket](l), err
}

// AuthPacket_Future is a wrapper for a AuthPacket promised by a client call.
type AuthPacket_Future struct{ *capnp.Future }

func (f AuthPacket_Future) Struct() (AuthPacket, error) {
	p, err := f.Future.Ptr()
	return AuthPacket(p.Struct()), err
}

type EntityMovePacket capnp.Struct

// EntityMovePacket_TypeID is the unique identifier for the type EntityMovePacket.
const EntityMovePacket_TypeID = 0xf2786494a8b7e4d0

func NewEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return EntityMovePacket(st), err
}

func NewRootEntityMovePacket(s *capnp.Segment) (EntityMovePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return EntityMovePacket(st), err
}

func ReadRootEntityMovePacket(msg *capnp.Message) (EntityMovePacket, error) {
	root, err := msg.Root()
	return EntityMovePacket(root.Struct()), err
}

func (s EntityMovePacket) String() string {
	str, _ := text.Marshal(0xf2786494a8b7e4d0, capnp.Struct(s))
	return str
}

func (s EntityMovePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityMovePacket) DecodeFromPtr(p capnp.Ptr) EntityMovePacket {
	return EntityMovePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityMovePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityMovePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityMovePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityMovePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityMovePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityMovePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntityMovePacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntityMovePacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityMovePacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntityMovePacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityMovePacket) Rotation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s EntityMovePacket) SetRotation(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s EntityMovePacket) Stopped() bool {
	return capnp.Struct(s).Bit(96)
}

func (s EntityMovePacket) SetStopped(v bool) {
	capnp.Struct(s).SetBit(96, v)
}

// EntityMovePacket_List is a list of EntityMovePacket.
type EntityMovePacket_List = capnp.StructList[EntityMovePacket]

// NewEntityMovePacket creates a new list of EntityMovePacket.
func NewEntityMovePacket_List(s *capnp.Segment, sz int32) (EntityMovePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[EntityMovePacket](l), err
}

// EntityMovePacket_Future is a wrapper for a EntityMovePacket promised by a client call.
type EntityMovePacket_Future struct{ *capnp.Future }

func (f EntityMovePacket_Future) Struct() (EntityMovePacket, error) {
	p, err := f.Future.Ptr()
	return EntityMovePacket(p.Struct()), err
}
func (p EntityMovePacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntitySpawnPacket capnp.Struct

// EntitySpawnPacket_TypeID is the unique identifier for the type EntitySpawnPacket.
const EntitySpawnPacket_TypeID = 0x90a96340f29028ba

func NewEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntitySpawnPacket(st), err
}

func NewRootEntitySpawnPacket(s *capnp.Segment) (EntitySpawnPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntitySpawnPacket(st), err
}

func ReadRootEntitySpawnPacket(msg *capnp.Message) (EntitySpawnPacket, error) {
	root, err := msg.Root()
	return EntitySpawnPacket(root.Struct()), err
}

func (s EntitySpawnPacket) String() string {
	str, _ := text.Marshal(0x90a96340f29028ba, capnp.Struct(s))
	return str
}

func (s EntitySpawnPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntitySpawnPacket) DecodeFromPtr(p capnp.Ptr) EntitySpawnPacket {
	return EntitySpawnPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntitySpawnPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntitySpawnPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntitySpawnPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntitySpawnPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntitySpawnPacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntitySpawnPacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s EntitySpawnPacket) Position() (Vec3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vec3(p.Struct()), err
}

func (s EntitySpawnPacket) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntitySpawnPacket) SetPosition(v Vec3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vec3 struct, preferring placement in s's segment.
func (s EntitySpawnPacket) NewPosition() (Vec3, error) {
	ss, err := NewVec3(capnp.Struct(s).Segment())
	if err != nil {
		return Vec3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// EntitySpawnPacket_List is a list of EntitySpawnPacket.
type EntitySpawnPacket_List = capnp.StructList[EntitySpawnPacket]

// NewEntitySpawnPacket creates a new list of EntitySpawnPacket.
func NewEntitySpawnPacket_List(s *capnp.Segment, sz int32) (EntitySpawnPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EntitySpawnPacket](l), err
}

// EntitySpawnPacket_Future is a wrapper for a EntitySpawnPacket promised by a client call.
type EntitySpawnPacket_Future struct{ *capnp.Future }

func (f EntitySpawnPacket_Future) Struct() (EntitySpawnPacket, error) {
	p, err := f.Future.Ptr()
	return EntitySpawnPacket(p.Struct()), err
}
func (p EntitySpawnPacket_Future) Position() Vec3_Future {
	return Vec3_Future{Future: p.Future.Field(0, nil)}
}

type EntityObservePacket capnp.Struct

// EntityObservePacket_TypeID is the unique identifier for the type EntityObservePacket.
const EntityObservePacket_TypeID = 0xc823831ca674c61b

func NewEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func NewRootEntityObservePacket(s *capnp.Segment) (EntityObservePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityObservePacket(st), err
}

func ReadRootEntityObservePacket(msg *capnp.Message) (EntityObservePacket, error) {
	root, err := msg.Root()
	return EntityObservePacket(root.Struct()), err
}

func (s EntityObservePacket) String() string {
	str, _ := text.Marshal(0xc823831ca674c61b, capnp.Struct(s))
	return str
}

func (s EntityObservePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityObservePacket) DecodeFromPtr(p capnp.Ptr) EntityObservePacket {
	return EntityObservePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityObservePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityObservePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityObservePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityObservePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityObservePacket) Entity() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EntityObservePacket) SetEntity(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EntityObservePacket_List is a list of EntityObservePacket.
type EntityObservePacket_List = capnp.StructList[EntityObservePacket]

// NewEntityObservePacket creates a new list of EntityObservePacket.
func NewEntityObservePacket_List(s *capnp.Segment, sz int32) (EntityObservePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityObservePacket](l), err
}

// EntityObservePacket_Future is a wrapper for a EntityObservePacket promised by a client call.
type EntityObservePacket_Future struct{ *capnp.Future }

func (f EntityObservePacket_Future) Struct() (EntityObservePacket, error) {
	p, err := f.Future.Ptr()
	return EntityObservePacket(p.Struct()), err
}

const schema_9c4788c5a214e29c = "x\xda\x94RMHT\x7f\x14\xbd\xe7w\x9f\x8e\x8a\x0f" +
	"\xe7\xfd\xdf\xec\xfe\xc1,\x8a\xd0hBs\x13n\xc6\"" +
	"\xe9\x83\xc4\xf9a\x1f\x14-z\x8e\x0f\x14\xf3\xbd\x87\xbe" +
	"q\xc60$Rpa a\xd0\xc2E\xb9\x88\\D" +
	"\xcb\xa0U\x05V\xd4&\x03\x03\x17m\"\x88\xda\xe5\xae" +
	"\x0f\xfd\xc5{\xf3\xf1t\x9aM\xbb\xcb\xbd\x97s\xcf=" +
	"\xe7\xb4\xcf\xa3[\xeb\xd0\xf3LB\xb6\xd6\xd5\xab\xa7\xad" +
	"\x0b\x9b\xdd\xd9\x95\x05\x92:\xa0\x96>%\x96W\xe7N" +
	",Q\x1dbD\xe6}\xfc4\x1f\x85\xd5\x0a\xf2\x04\xf5" +
	"\xec\xe2\x87o-\xb3o^U-\xf7 VGd6" +
	"\x8ae\xd3\x101\xa2N]$AP\xcfSo\xd7F" +
	"/|\x0d\xd7E\xb4\xae\x05\x80m|\xdb\xec\xe0\xa0J" +
	"\xf1c\x82\xfa\xff\xa5\xff`\xcf\xcd\xbd\xaf\xab\xa0\x83\xdd" +
	"\xceUn\x82\xb9\x1e.\xafq\x9a\xa0\xde}~\xf2p" +
	"q\xb0\xb0Y\x05\\$\xfd\x9d7\xcd\xadp\xf9\x07\x7f" +
	"!\xa8\x89\xf7\x1b\xfd]\xe7\xf6o\xd7@6\xd7\xb5\x17" +
	"\xe6\xc7\xb0\xda\xd0\xd2\x94R\x9e\x95\x1d\xb1\xfdCYa" +
	"y\x8e\xd7\xd5\xe3\xf8\xc3\xfed\xbfg\xe5\x9dt&\x9c" +
	"d\x00\xd9\xc0\x1a\x91\x06\"\xa3\xad\x8bH\xeec\xc8v" +
	"\x01 \x81\xa0\x97:M$\x0f2\xe4\x11\x81\xb4\x1d\x02" +
	"\xa0\x91\x04\x1a\x09\xcas\xc7\x87\xfda\xd7!\"\xc4#" +
	"u\x08\x88\x07\xd3\xd2m\x84\xb73V6V:\x98`" +
	"\xadY\xa9\xf0\xe2\xf5cD\xb2\xc0\x903\x02:\xb6U" +
	"\xf1\xe6\x8d\x03Dr\x8a!\xe7\x04t\xb1\xa5\x12\x10D" +
	"\xc6\xec%\"9\xc3\x90\x0b\x02:\xffV\x090\x91q" +
	"k\x80H\xce3\xe4]\x01]\xfb\xa5\x12\xd0\x88\x8c;" +
	"cDr\x91!\xef\x09L\xe7\x9c\x11\xc7\xcd;T\xdf" +
	"b\xe5\xfc!\xc4#\x05KL\x8bo\xf5\xba\xc4\x136" +
	"\xe2\x91\x1b\xbb\xc6\xfd\x1e\xc5\xac\xbc\x83x\x14\xb1]\xf3" +
	"\xbe\x01J\x8e\xdbc!B\xc5\xfc\x9aR\x9c\xb7\xb3\xe8" +
	"\x0c\x84h\xae(\xdf\xf3\x1f\x91\xecf\xc83\x02FY" +
	"\xfaSA\xf38Cf\x04\x0c!\x8a*\xf4\x06\xcd\x93" +
	"\x0cyV\x00\x054\x91@\x13\x01\x93\x95\xeaZ\xb9\xaa" +
	"\\\xe5\x1d\xe6\xf7\x0d\x84\x1c\x8b\xee\x13\x05,\xb4\x0a\x0b" +
	"=\xf0\xbf\x81!\x135\xbc\xae\x91\xa4^w\xc2\xce$" +
	"+A\x8aW\x80\xac\x00\xe82C\x0eEA\xb2\x83 " +
	"\x0d2\xa4\xb7\xe3\x9b\xd1\xa0y\x95!\x0b\x02\x06_)" +
	"Z\x9a\x0bB\xe11\xe4\xd4\xbfFn\xcc\xf5\xad\xf2\xb4" +
	"\xa4\xc2\xf4\xb8\xefz\x9e=\x08\x90\x00\xfez\xe4h\xce" +
	"\x1f*\x89Q\xa5\xc5\xe1H\x8b\xa4\xef\x8e\xd8N\x99\xc3" +
	"\x9f\x00\x00\x00\xff\xff\xec\x03\"+"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9c4788c5a214e29c,
		Nodes: []uint64{
			0x90a96340f29028ba,
			0xc7ca850fead659c0,
			0xc7e9576dd1cb2dc1,
			0xc823831ca674c61b,
			0xf2786494a8b7e4d0,
			0xfe26553a53d9d276,
		},
		Compressed: true,
	})
}
